import os
import csv
from datetime import datetime
import argparse

def parse_markdown(file_path):
    data = {
        'Topic': None,
        'Timestamp': None,
        'Actions': []
    }
    with open(file_path, 'r', encoding='utf-8') as file:
        for line in file:
            if line.startswith('# Topic:'):
                data['Topic'] = line.split(':')[-1].strip()
            elif line.startswith('> Timestamp:'):
                data['Timestamp'] = line.split(':')[-1].strip()
            elif line.strip().startswith('- ['):
                status = 'DONE' if 'x]' in line else 'OPEN'
                task = line.split(']')[-1].strip()
                data['Actions'].append((task, status))
    return data

def read_existing_csv(filename):
    entries = {}
    try:
        with open(filename, mode='r', newline='', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                key = (row['Action Item Text'], row['Timestamp'])
                entries[key] = row
    except FileNotFoundError:
        pass
    return entries

def write_to_csv(entries, filename):
    with open(filename, mode='w', newline='', encoding='utf-8') as file:
        fieldnames = ['Filename', 'Topic', 'Timestamp', 'Current Time', 'Action Item Text', 'Action Item Status', 'Days Interval']
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        for entry in entries.values():
            writer.writerow(entry)

def query_csv(query, filename):
    entries = read_existing_csv(filename)
    results = []
    
    for key, entry in entries.items():
        if query.lower() in entry['Action Item Text'].lower():
            # Reformat the timestamp to show only the date
            timestamp_date = datetime.strptime(entry['Timestamp'], '%Y-%m-%d-%H-%M-%S').strftime('%Y-%m-%d')
            
            results.append({
                'Timestamp': timestamp_date,
                'Status': entry['Action Item Status'],
                'Duration': entry['Days Interval'],
                'Topic': entry['Topic'],
                'Action Item': entry['Action Item Text']
            })

    # Sort results by status
    results.sort(key=lambda x: (-ord(x['Status'][0]), x['Action Item']))

    # Define column widths
    timestamp_width = 6
    status_width = 5
    days_interval_width = 5
    topic_width = 30
    action_text_width = 50

    # Print headers with alignment
    print(f"{'Timestamp':<{timestamp_width}}\t{'Status':<{status_width}}\t{'Age':<{days_interval_width}}\t{'Topic':<{topic_width}}\t{'Action Item':<{action_text_width}}")

    # Print results
    for result in results:
        formatted_output = "{:<{tsw}}\t{:<{sw}}\t{:<{diw}}\t{:<{tw}}\t{:<{atw}}".format(
            result['Timestamp'],
            result['Status'],
            result['Duration'],
            result['Topic'],
            result['Action Item'],
            tsw=timestamp_width,
            sw=status_width,
            diw=days_interval_width,
            tw=topic_width,
            atw=action_text_width
        )
        print(formatted_output)


def process_folder(folder_path, output_csv):
    entries = read_existing_csv(output_csv)

    for filename in os.listdir(folder_path):
        if filename.endswith('.md'):
            file_path = os.path.join(folder_path, filename)
            markdown_data = parse_markdown(file_path)

            for action, status in markdown_data['Actions']:
                key = (action, markdown_data['Timestamp'])
                current_time = datetime.now()
                timestamp_datetime = datetime.strptime(markdown_data['Timestamp'], '%Y-%m-%d-%H-%M-%S')
                days_interval = (current_time - timestamp_datetime).days

                if key in entries:
                    if entries[key]['Action Item Status'] == 'DONE':
                        continue  # Skip updating DONE items
                    entries[key]['Action Item Status'] = status
                else:
                    entries[key] = {
                        'Filename': os.path.basename(file_path),
                        'Topic': markdown_data['Topic'],
                        'Timestamp': markdown_data['Timestamp'],
                        'Current Time': current_time.strftime('%Y-%m-%d %H:%M:%S'),
                        'Action Item Text': action,
                        'Action Item Status': status,
                        'Days Interval': days_interval
                    }

    write_to_csv(entries, output_csv)

def main():
    parser = argparse.ArgumentParser(description="Process markdown files or query actions.")
    parser.add_argument("--query", type=str, help="Query action items by text.")
    args = parser.parse_args()

    home_path = os.path.expanduser('~')
    folder_path = os.path.join(home_path, '.adulting', 'notes')
    output_csv = os.path.join(home_path, '.adulting', 'actions_log.csv')

    if args.query:
        query_csv(args.query, output_csv)
    else:
        process_folder(folder_path, output_csv)

if __name__ == "__main__":
    main()
