#!/bin/bash

NOTES_DIR="$HOME/.adulting/notes"
THREAD_DIR="$HOME/.adulting/threads"
CSS_LOCATION="$HOME/.adulting/pandoc.css"
DOWNLOADS_DIR="$HOME/Downloads"

# Export variables
export NOTES_DIR
export THREAD_DIR
export CSS_LOCATION
export DOWNLOADS_DIR

# Check if the directory exists, if not, create it
if [ ! -d "$NOTES_DIR" ]; then
    mkdir -p "$NOTES_DIR"
fi

select_note() {
    echo "$notes_all" | awk 'BEGIN{FS="|"} {print $1, "|", $3, "|", $4, "|", $5, "|", $6}' | column -t -s "|"
    echo "Which note do you want to select?"
    read note_number
    note_number="$note_number"p
    selected_note=$(echo $(echo "$notes_unfiltered" | sed -n "$note_number" | awk 'BEGIN{FS="|"} {print $2}'))
    echo $selected_note
}

# Define a function to edit a note based on the operating system
open_note() {
    # Check the operating system
    if [[ $(uname) == "Linux" ]]; then
        #nano -"$@" note
        open -g $note
    elif [[ $(uname) == "Darwin" ]]; then
        #nano "$@" note
        open -g $note
    else
        # If it's neither Linux nor macOS, print an error message
        echo "Unsupported operating system"
    fi
}

export -f open_note

if [[ $1 = "--new" ]] || [ -z "$1" ]; then
    ./notes_new
else

# Rebuild directory listing
for f in $NOTES_DIR/*
        do
                filenum=$((filenum+1))
                note_info=$filenum
                note_info+="|"
                note_info+=$(basename $f)
                note_info+="|"
                note_info+=$(basename $f | cut -c 1-10)  
                note_info+="|"
                note_info+=$(grep "\*\*Thread\*\*:" $f | cut -d ":" -f2- | sed -e 's/^[[:space:]]*//')
                note_info+="|"
                note_info+=$(grep "\*\*Type\*\*:" $f | cut -d ":" -f2- | sed -e 's/^[[:space:]]*//')
                note_info+="|"
                note_info+=$(grep "# Topic:" $f | cut -d ":" -f2- | sed -e 's/^[[:space:]]*//')
                notes_unfiltered="${notes_unfiltered}"$'\n'"${note_info}"
        done

# Remove the first newline
notes_unfiltered=${notes_unfiltered:1}

if [ ! -z "$2" ]; then
  notes_all=$(echo "$notes_unfiltered" | grep -i "$2" | awk -F  "/" 'tolower($0) ~ /1/ {print $NF}')
else
  notes_all="$notes_unfiltered"
fi

# Process according to flags
if [[ $1 = "--last" ]]; then
        last_note=$(echo "$notes_all" | tail -n 1 | awk 'BEGIN{FS="|"} {print $2}')
        note="$NOTES_DIR/$last_note"
        echo -e Start:'\t'$(date '+%Y-%m-%d-%H:%M:%S') >> "$note"
        open_note $note
        echo -e End:'\t'$(date '+%Y-%m-%d-%H:%M:%S') >> "$note"


elif [[ $1 = "--read" ]]; then
        select_note
        ./notes_read $selected_note


elif [[ $1 = "--delete" ]]; then
        select_note
        note="$NOTES_DIR/$selected_note"
        rm $note

elif [[ $1 = "--edit" ]]; then
        select_note
        note="$NOTES_DIR/$selected_note"
        echo -e Start:'\t'$(date '+%Y-%m-%d-%H:%M:%S')'  ' >> "$note"
        open_note $note
        echo -e End:'\t'$(date '+%Y-%m-%d-%H:%M:%S')'  ' >> "$note"


elif [[ $1 = "--copy" ]]; then
        select_note
        note="$NOTES_DIR/$selected_note"
	    # Determine timestamp
	    dt=$(date '+%Y-%m-%d-%H-%M-%S');
	    new_note="$NOTES_DIR/$dt.md"
        cp $note $new_note
        sed -i '' '1s/$/COPY/' $new_note
        echo "Copied $selected_note to $dt.md"


elif [[ $1 = "--strip" ]]; then
        select_note
        note="$NOTES_DIR/$selected_note"
	    # Determine timestamp
	    dt=$(date '+%Y-%m-%d-%H-%M-%S');
	    new_note="$NOTES_DIR/$dt.md"
        cp $note $new_note
        sed -i '' '1s/$/STRIPPED/' $new_note
        echo "Copied $selected_note to $dt.md"
        echo "Stripping $dt.md"
        ./notes_strip $dt.md

elif [[ $1 = "--actions" ]]; then

./notes_actions

else
       echo "Please use a flag. Either --read, --edit, --strip, --delete, --last, --new or --actions."
fi
fi
