#!/bin/bash

NOTES_DIR="$HOME/.adulting/notes"
THREAD_DIR="$HOME/.adulting/threads"
CSS_LOCATION="$HOME/.adulting/pandoc.css"
DOWNLOADS_DIR="$HOME/Downloads"



# Check if the directory exists, if not, create it
if [ ! -d "$NOTES_DIR" ]; then
    mkdir -p "$NOTES_DIR"
fi


# Function to display help text
display_help() {
    cat << EOF

Usage: $0 [option]
Example: $0 --new


CREATION:
    --new       [DEFAULT] Create a new note and open for editing in default text editor.
    --copy      Select and copy note contents to a new note with the current timestamp. Does not alter the timestamp in the note header - you need to do that manually
    --strip     Select and copy note contents to a new note and remove anything that is not a header or an action item. Useful for using one note as a template for another note.


MODIFICATION:
    --edit      Select and open a note in default text editor.
                    Special keywords you can use in your note for downstream processing:
                        "AGREED:"   Indicates a statement that the meeting group formally agrees on.
                        "RESOLVED:" Indicates a statement that a meeting group resolves.
                        "- [ ]"     Will be tracked as an action item, and show up in notes --actions until closed with an '[x]'.
    --last      Select and open the last created note in default text editor.
    --actions   Display open actions across all notes in nano text editor. 
                    You can edit the action status ("[ ]" vs "[x]") and content and it will update the status in the original note.


DELETION - permanently removes data:
    --delete    Select and permanently delete a note.


RENDERING - does not alter original note contents. Rendered documents are saved to ~/Downloads:
    --cat       Print the note content to the terminal. Useful for piping.

    --pdf       Select, reformat and open a selected note as PDF and markdown. 
                For --pdf, reformatting includes:
                    - Creating a latex header from the note metadata.
                    - Placing the location, attendees participants on the first page, if they exist.
                    - Adds a Summary section above all content which contains:
                        - Action items, as indicated by the presence of a markdown checkbox ([ ] or [x]). 

    --minutes   Select, reformat and open a selected note as Meeting Minutes in PDF and markdown. 
                For --minutes, reformatting includes:
                    - Creating a latex header from the note metadata.
                    - Adding a table of contents, as indicated by markdown headers.
                    - Placing the location, attendees participants on the first page, if they exist.
                    - Adds a Summary section above all content which contains:
                        - Minutes agreements, as indicaed by the "AGREED:" keyword.
                        - Resolutions, as indicated by the "RESOLVED:" keyword.
                        - Action items, as indicated by the presence of a markdown checkbox ([ ] or [x]). 

    --agenda   Select, reformat and open a selected note as Meeting Agenda in PDF and markdown. 
                For --agenda, reformatting includes:
                    - Creating a latex header from the note metadata.
                    - Placing the location, attendees participants on the first page, if they exist.

EOF
}



# FUNCTIONS
# Select note
select_note() {
    echo "$notes_all" | awk 'BEGIN{FS="|"} {print $1, "|", $3, "|", $4, "|", $5, "|", $6}' | column -t -s "|"
    echo "Which note do you want to select?"
    read note_number
    note_number="$note_number"p
    selected_note=$(echo $(echo "$notes_unfiltered" | sed -n "$note_number" | awk 'BEGIN{FS="|"} {print $2}'))
    echo $selected_note
}

# Open  note
open_note() {
    # Check the operating system
    if [[ $(uname) == "Linux" ]]; then
        #nano -"$@" note
        open -g $note
    elif [[ $(uname) == "Darwin" ]]; then
        #nano "$@" note
        open -g $note
    else
        # If it's neither Linux nor macOS, print an error message
        echo "Unsupported operating system"
    fi
}


# EXPORTS
# Export variables
export NOTES_DIR
export THREAD_DIR
export CSS_LOCATION
export DOWNLOADS_DIR

# Export functions
export -f open_note


# NEW NOTE
if [[ $1 = "--new" ]] || [ -z "$1" ]; then
    notes_new
else


# GET NOTES LIST
for f in $NOTES_DIR/*
    do
        filenum=$((filenum+1))
        note_info=$filenum
        note_info+="|"
        note_info+=$(basename $f)
        note_info+="|"
        note_info+=$(basename $f | cut -c 1-10)  
        note_info+="|"
        note_info+=$(grep "\*\*Thread\*\*:" $f | cut -d ":" -f2- | sed -e 's/^[[:space:]]*//')
        note_info+="|"
        note_info+=$(grep "\*\*Type\*\*:" $f | cut -d ":" -f2- | sed -e 's/^[[:space:]]*//')
        note_info+="|"
        note_info+=$(grep "# Topic:" $f | cut -d ":" -f2- | sed -e 's/^[[:space:]]*//')
        notes_unfiltered="${notes_unfiltered}"$'\n'"${note_info}"
    done

# Remove the first newline
notes_unfiltered=${notes_unfiltered:1}

if [ ! -z "$2" ]; then
  notes_all=$(echo "$notes_unfiltered" | grep -i "$2" | awk -F  "/" 'tolower($0) ~ /1/ {print $NF}')
else
  notes_all="$notes_unfiltered"
fi

# OPEN LAST NOTE
if [[ $1 = "--last" ]]; then
    last_note=$(echo "$notes_all" | tail -n 1 | awk 'BEGIN{FS="|"} {print $2}')
    note="$NOTES_DIR/$last_note"
    echo -e Start:'\t'$(date '+%Y-%m-%d-%H:%M:%S') >> "$note"
    open_note $note
    echo -e End:'\t'$(date '+%Y-%m-%d-%H:%M:%S') >> "$note"


# COMPILE AND RENDER NOTE AS MEETING MINUTES
elif [[ $1 = "--minutes" ]]; then
    select_note
    notes_minutes $selected_note

# COMPILE AND RENDER NOTE AS MEETING MINUTES
elif [[ $1 = "--agenda" ]]; then
    select_note
    notes_agenda $selected_note


# COMPILE AND RENDER NOTE AS PDF
elif [[ $1 = "--pdf" ]]; then
    select_note
    notes_pdf $selected_note


# DELETE NOTE
elif [[ $1 = "--delete" ]]; then
    select_note
    note="$NOTES_DIR/$selected_note"
    rm $note


# EDIT NOTE
elif [[ $1 = "--edit" ]]; then
    select_note
    note="$NOTES_DIR/$selected_note"
    echo -e Start:'\t'$(date '+%Y-%m-%d-%H:%M:%S')'  ' >> "$note"
    open_note $note
    echo -e End:'\t'$(date '+%Y-%m-%d-%H:%M:%S')'  ' >> "$note"


# CAT NOTE
elif [[ $1 = "--cat" ]]; then
    select_note
    note="$NOTES_DIR/$selected_note"
    cat $note


# COPY NOTE
elif [[ $1 = "--copy" ]]; then
    select_note
    note="$NOTES_DIR/$selected_note"
	# Determine timestamp
	dt=$(date '+%Y-%m-%d-%H-%M-%S');
	new_note="$NOTES_DIR/$dt.md"
    cp $note $new_note
    sed -i '' '1s/$/ COPY/' $new_note
    echo "Copied $selected_note to $dt.md"


# COPY AND STRIP NOTE
elif [[ $1 = "--strip" ]]; then
    select_note
    note="$NOTES_DIR/$selected_note"
	# Determine timestamp
	dt=$(date '+%Y-%m-%d-%H-%M-%S');
	new_note="$NOTES_DIR/$dt.md"
    cp $note $new_note
    sed -i '' '1s/$/ STRIPPED/' $new_note
    echo "Copied $selected_note to $dt.md"
    echo "Stripping $dt.md"
    notes_strip $dt.md


# DISPLAY OPEN ACTION ITEMS
elif [[ $1 = "--actions" ]]; then
    notes_actions 

# FLAG ERROR CATCHALL
else
    display_help
fi
fi
