#!/bin/bash

selected_note=$1

        note="$NOTES_DIR/$selected_note"
        echo -e Print:'\t'$(date '+%Y-%m-%d-%H:%M:%S')'\t' >> "$note" 

        # Temporary files for different tasks
        metadata_file=$(mktemp)
        temp_file="clean_output.md"
        temp_summary="temp_summary.md"
        resolved_lines="resolved_lines.txt"
        agreed_lines="agreed_lines.txt"
        action_lines="action_lines.txt"
        final_file="$DOWNLOADS_DIR/$selected_note"
        file_path=$note

        # Extract file metadata
        title=$(grep '^# Topic:' "$note" | cut -d ':' -f2- | xargs)
        type=$(grep '^**Type\*\*\:' "$note" | cut -d ':' -f2- | xargs)
        location=$(grep '^**Location\*\*\:' "$note" | cut -d ':' -f2- | xargs)
        attendees=$(grep '^**Attendees\*\*\:' "$note" | cut -d ':' -f2- | xargs)
        participants=$(grep '^**Participants\*\*\:' "$note" | cut -d ':' -f2- | xargs)
        timestamp=$(grep '^**Timestamp\*\*\:' "$note" | cut -d ':' -f2- | xargs)


# Write the metadata to the temporary file
cat <<EOF > "$metadata_file"
---
title: $title
date: $(echo "$timestamp" | cut -c 1-10) 
toc: false
mainfont: Arial
header-includes:
  - \usepackage{geometry}
geometry:
- top=30mm
- left=20mm
- heightrounded
---

\newpage

# $type Details

EOF

# Add location if it's not empty
if [ -n "$location" ]; then
    echo "**Location**: $location  " >> "$metadata_file"
    echo "" >> "$metadata_file"

fi

# Add attendees if it's not empty
if [ -n "$attendees" ]; then
    echo "**Attendees**:  " >> "$metadata_file"
    echo "" >> "$metadata_file"
    echo "$attendees" | awk -v RS=';' '{print "- " $0 }' >> "$metadata_file"
fi

# Add participants if it's not empty
if [ -n "$participants" ]; then
    echo "**Participants**:  " >> "$metadata_file"
    echo "" >> "$metadata_file"
    echo "$participants" | awk -v RS=';' '{print "- " $0 }' >> "$metadata_file"
fi


# Check if # Summary section exists, and add it if not
if ! grep -q '# Summary' "$file_path"; then
    awk '
    /# Content/ {
        print;
        next;
    }
    { print }
    ' "$file_path" > "$temp_summary"
else
    cp $file_path $temp_summary
fi


# Remove the metadata content
# Remove the content between # Agreed and the line with dashes
# Remove the content between # Actions and the line with dashes
awk '
BEGIN { print_lines = 1 }
index($0, "# Topic:") == 1 || index($0, "**Type") == 1 || index($0, "**Thread") == 1 || index($0, "**Location") == 1 || index($0, "**Attendees") == 1 || index($0, "**Timestamp") == 1 { next }
/# Minuted Agreements/ {
    print;
    print_lines = 0;
    next;
}
/--{10,}/ && print_lines == 0 { print_lines = 1; }
/# Resolutions/ {
    print;
    print_lines = 0;
    next;
}
/--{10,}/ && print_lines == 0 { print_lines = 1; }
/# Action Items/ {
    print;
    print_lines = 0;
    next;
}
/--{10,}/ && print_lines == 0 { print_lines = 1; }
/# Timesheet/ { exit }
print_lines { print }
' "$temp_summary" > "$temp_file"

# Re-add metadata in pandoc compatible structure
cat "$metadata_file" "$temp_file" > "$temp_file.tmp"
# Rename the temporary file to the original file
mv "$temp_file.tmp" "$temp_file"
# Remove the temporary metadata file
rm "$metadata_file"

        cp "$temp_file"  "$final_file"

        # Clean up
        rm "$temp_file"  "$temp_summary"

        #cat "$final_file"

        #pandoc -s -f gfm -t html $note -c $CSS_LOCATION > /tmp/tempfile.html 
        pandoc $final_file -s -o "$DOWNLOADS_DIR/$selected_note.pdf" --pdf-engine=xelatex    \
		-V header-includes="\let\oldtoc\tableofcontents\renewcommand{\tableofcontents}{\oldtoc\newpage}" \
		-V header-includes="\AtBeginEnvironment{quote}{\itshape}"
	#/usr/bin/pandoc -s -f gfm -t html $note  > /tmp/tempfile.html        
        #open -g /tmp/tempfile.pdf &
        #open -g $final_file &
        open -g "$DOWNLOADS_DIR/$selected_note.pdf" &
