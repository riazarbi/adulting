#!/usr/bin/env python3

import os
import datetime
import argparse

def get_user_input(prompt, default=None):
    user_input = input(prompt)
    if default is not None and user_input == '':
        return default
    return user_input

def select_project(projects):
    print("Select a project:")
    for i, project in enumerate(projects, 1):
        print(f"{i}. {project}")
    print(f"{len(projects) + 1}. Add new project")
    
    choice = int(get_user_input("Enter the number of your choice: "))
    if choice == len(projects) + 1:
        new_project = get_user_input("Enter the name of the new project: ")
        projects.append(new_project)
        return new_project
    else:
        return projects[choice - 1]

def select_amount(amounts):
    print("Select an amount:")
    for i, amount in enumerate(amounts, 1):
        print(f"{i}. {amount}")
    
    choice = int(get_user_input("Enter the number of your choice: "))
    return amounts[choice - 1]

def append_to_file(filename, line):
    with open(filename, 'a') as file:
        file.write(line + '\n')

def read_projects_from_file(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r') as file:
            return [line.strip() for line in file.readlines()]
    else:
        return []

def read_rates_from_file(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r') as file:
            return [int(line.strip()) for line in file.readlines()]
    else:
        return []

def read_logs(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r') as file:
            return [line.strip() for line in file.readlines()]
    else:
        return []

def format_log(log):
    parts = log.split(';')
    date = datetime.datetime.strptime(parts[0], "%d %b %Y at %H:%M").strftime("%d %b %Y")
    duration_hours = round(int(parts[3]) / 60, 2)
    rate = int(parts[6])
    total = round(rate * duration_hours, 2)
    description = parts[5]
    return f"{date:<15} {duration_hours:<10.2f} {rate:<10} {total:<10.2f} {description:<50}"

def main():
    parser = argparse.ArgumentParser(description="Work log utility")
    parser.add_argument('--report', action='store_true', help='Generate report for a project')
    args = parser.parse_args()

    threads_dir = os.path.expanduser("~/.adulting/work")
    projects_file = os.path.join(threads_dir, 'projects.txt')
    work_log_file = os.path.join(threads_dir, 'work_log.txt')
    rates_file = os.path.join(threads_dir, 'rates.txt')

    if args.report:
        # Generate report
        projects = read_projects_from_file(projects_file)
        if not projects:
            print("No projects found.")
            return
        project = select_project(projects)
        
        logs = read_logs(work_log_file)
        project_logs = [log for log in logs if f";{project};" in log]
        project_logs = project_logs[-10:]  # Get the last 10 entries

        print(f"Last 10 log items for project: {project}")
        print(f"{'Date':<15} {'Hrs':<10} {'Rate':<10} {'Total':<10} {'Description':<50}")
        print("="*120)
        for log in project_logs:
            print(format_log(log))
        return

    print("Let's log a new work entry.")
    
    # Date and time
    now = datetime.datetime.now().strftime("%d %b %Y at %H:%M")
    
    # Task type (default to 'work')
    task_type = get_user_input("Enter task type (default: work): ", default='work')
    
    # Task status (default to 'start')
    status = 'start'
    
    # Duration in minutes (default to 60)
    duration = get_user_input("Enter duration in minutes (default: 60): ", default='60')
    
    # Project/Client name
    projects = read_projects_from_file(projects_file)
    if not projects:
        print("No projects found. Please add a new project.")
        new_project = get_user_input("Enter the name of the new project: ")
        projects.append(new_project)
        project = new_project
    else:
        project = select_project(projects)
    
    # Brief description of the task
    description = get_user_input("Enter a brief description of the task: ")
    
    # Amount (select from options)
    amounts = read_rates_from_file(rates_file)
    if not amounts:
        print("No rates found. Please ensure rates.txt is populated with valid amounts.")
        return
    amount = select_amount(amounts)

    # Form the line to append
    line = f"{now};{task_type};{status};{duration};{project};{description};{amount}"
    
    # Append to file
    append_to_file(work_log_file, line)
    
    print("Entry added to work_log.txt")

if __name__ == "__main__":
    main()
